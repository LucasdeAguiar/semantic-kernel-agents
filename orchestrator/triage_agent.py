import sys
import os
import asyncio
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from semantic_kernel import Kernel
from semantic_kernel.agents import ChatCompletionAgent, HandoffOrchestration, OrchestrationHandoffs
from semantic_kernel.agents.runtime import InProcessRuntime
from semantic_kernel.connectors.ai.open_ai import OpenAIChatCompletion
from semantic_kernel.contents import ChatMessageContent, AuthorRole

from core.memory_manager import ChatHistoryManager
from core.moderation import ContentModerator
from core.guardrails import GuardrailsManager

import logging

logger = logging.getLogger(__name__)


class TriageAgent:
    """
    Agente orquestrador que implementa handoff architecture
    para roteamento din√¢mico entre agentes especialistas.
    """
    
    def __init__(self, agentes_config: list[dict], api_key: str):
        self.agentes_config = agentes_config
        self.api_key = api_key
        self.specialist_agents = {}
        self.handoff_orchestration = None
        self.runtime = None

        self.memory_manager = ChatHistoryManager()
        self.moderator = ContentModerator(api_key=self.api_key)
        self.guardrails = GuardrailsManager(api_key=self.api_key)

        self._setup_agents()
        self._setup_handoff_orchestration()
    
    def _setup_agents(self):
        
        service = OpenAIChatCompletion(
            service_id="openai-triage",
            ai_model_id="gpt-4.1",  
            api_key=self.api_key
        )
        
        kernel = Kernel()
        kernel.add_service(service)
        
        specialists_info = []
        for config in self.agentes_config:
            if config["name"] != "TriageAgent":
                specialists_info.append(f"- {config['name']}: {config['description']}")

        RECOMMENDED_PROMPT_PREFIX = (
            "# System context\n"
            "You are part of a multi-agent system called the Agents SDK, designed to make agent "
            "coordination and execution easy. Agents uses two primary abstraction: **Agents** and "
            "**Handoffs**. An agent encompasses instructions and tools and can hand off a "
            "conversation to another agent when appropriate. "
            "Handoffs are achieved by calling a handoff function, generally named "
            "`transfer_to_<agent_name>`. Transfers between agents are handled seamlessly in the background;"
            " do not mention or draw attention to these transfers in your conversation with the user.\n"
        )

        dynamic_instructions = (
            f"{RECOMMENDED_PROMPT_PREFIX} "
            "You are an Orchestrator agent. Analyze the user's question and:\n"
            "1. If the question relates to any available specialist (flights, HR, tech support), immediately hand off to the appropriate agent\n" 
            "2. If the question is completely outside our scope (general knowledge, unrelated topics), respond politely explaining our limitations\n"
            "3. If the question is ambiguous, ask for clarification to properly route\n"
            "NEVER respond with specialist domain content - only handle routing, out-of-scope cases, and clarifications."
        )
        
        self.triage_agent = ChatCompletionAgent(
            name="TriageAgent",
            description="An Orchestrator agent that can delegate a customer's request to the appropriate agent.",
            instructions=dynamic_instructions,
            service=service
        )
        
        for config in self.agentes_config:
            if config["name"] != "TriageAgent": 
                from agents.specialist_agent import criar_agente_especialista
                specialist_agent = criar_agente_especialista(config, self.api_key)
                self.specialist_agents[config["name"]] = specialist_agent
    
    def _setup_handoff_orchestration(self):
        handoffs = (
            OrchestrationHandoffs()
            .add_many(
                source_agent=self.triage_agent.name,
                target_agents={
                    agent_name: f"Transfer to this agent if the issue is related to {agent.description.lower()}"
                    for agent_name, agent in self.specialist_agents.items()
                }
            )
        )
        
        for agent_name in self.specialist_agents.keys():
            handoffs.add(
                source_agent=agent_name,
                target_agent=self.triage_agent.name,
                description="Transfer back to triage if the issue is not related to my expertise"
            )
        
        all_agents = [self.triage_agent] + list(self.specialist_agents.values())
        
        self.handoff_orchestration = HandoffOrchestration(
            members=all_agents,
            handoffs=handoffs,
            agent_response_callback=self._agent_response_callback
        )
    
    def _agent_response_callback(self, message: ChatMessageContent) -> None:
        # Adicionar mensagem ao hist√≥rico principal
        self.memory_manager.add_message(message)
        
        # Salvar hist√≥rico automaticamente ap√≥s cada mensagem
        try:
            self.memory_manager.save_history()
            logger.debug(f"üíæ Hist√≥rico salvo automaticamente ap√≥s mensagem de {message.name}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao salvar hist√≥rico: {e}")
        
        # Atualizar o hist√≥rico na orquestra√ß√£o para o pr√≥ximo handoff
        if hasattr(self.handoff_orchestration, '_history'):
            self.handoff_orchestration._history = self.memory_manager.get_chat_history()
        
        message_key = f"{message.name}:{message.content[:100]}"
        if not hasattr(self, '_displayed_messages'):
            self._displayed_messages = set()
        
        # Capturar respostas de agentes
        if (hasattr(message, 'role') and 
            message.role.value == "assistant" and 
            message.name and 
            message.name != "Sistema"):
            
            if message.name == "TriageAgent":
                # TriageAgent s√≥ deve responder para OOS ou clarifica√ß√µes
                # Detectar se est√° tentando fazer handoff textualmente
                handoff_indicators = [
                    'vou encaminhar', 'direcionando', 'transferindo', 'redirecionando',
                    'aguarde um instante', 'setor respons√°vel', 'especialista', 'departamento'
                ]
                
                if (any(keyword in message.content.lower() for keyword in ['transfer', 'handoff', 'delegate', 'routing']) or
                    any(indicator in message.content.lower() for indicator in handoff_indicators)):
                    logger.warning(f"üö´ TriageAgent tentou responder com handoff textual (ignorado): {message.content[:50]}...")
                    return
                
                # Resposta v√°lida do TriageAgent (OOS ou clarifica√ß√£o)
                self._last_agent_response = {
                    "name": message.name,
                    "content": message.content
                }
                logger.info(f"üéØ TriageAgent respondeu validamente: {message.content[:50]}...")
                
            else:
                # Agente especialista
                # Verificar se √© resposta OOS (fora de escopo)
                if self._is_out_of_scope_response(message.content):
                    logger.warning(f"üö´ {message.name} respondeu OOS: {message.content[:50]}...")
                    # N√ÉO capturar respostas OOS - deixar o TriageAgent gerenciar
                    return
                
                # Resposta v√°lida de agente especialista
                self._last_agent_response = {
                    "name": message.name,
                    "content": message.content
                }
                logger.info(f"‚úÖ Resposta capturada de {message.name}: {message.content[:50]}...")
        
        if message_key not in self._displayed_messages:
            self._displayed_messages.add(message_key)
            
            agent_name = message.name or "Sistema"
            content = message.content
            
            if len(content) > 1000:
                content = content[:1000] + "...\n[Mensagem truncada - muito longa]"
            
            # S√≥ mostrar no console se n√£o for resposta indevida do TriageAgent
            if message.name != "TriageAgent" or "transfer" in content.lower():
                print(f"ü§ñ {agent_name}: {content}")
        
        if len(self._displayed_messages) > 100:
            self._displayed_messages.clear()
    
    def iniciar_runtime(self):
        self.runtime = InProcessRuntime()
        self.runtime.start()
    
    async def parar_runtime(self):
        if self.runtime:
            await self.runtime.stop_when_idle()
    
    async def processar_mensagem(self, mensagem: str) -> str:
        import time
        start_time = time.time()
        
        try:
            if not self.runtime:
                self.iniciar_runtime()

            self._last_agent_response = None

            # Tempo de an√°lise de guardrails
            guardrail_start = time.time()
            guardrail_result = self.guardrails.analisar_mensagem(mensagem)
            guardrail_time = round(time.time() - guardrail_start, 3)
            
            if guardrail_result.blocked:
                total_time = round(time.time() - start_time, 3)
                logger.info(f"‚è±Ô∏è Guardrails: {guardrail_time}s | Total: {total_time}s (BLOQUEADO)")
                
                blocked_message = ChatMessageContent(
                    role=AuthorRole.ASSISTANT,
                    content=f"‚õî Sua mensagem foi bloqueada por regras de seguran√ßa ({guardrail_result.guardrail_name}): {guardrail_result.reason}",
                    name="Sistema"
                )
                self.memory_manager.add_message(blocked_message)
                print(f"ü§ñ Sistema: {blocked_message.content}")
                return blocked_message.content

            # Tempo de an√°lise de modera√ß√£o
            moderation_start = time.time()
            moderation_result = self.moderator.analisar_mensagem(mensagem)
            moderation_time = round(time.time() - moderation_start, 3)
            
            if moderation_result.flagged:
                total_time = round(time.time() - start_time, 3)
                logger.warning(f"‚è±Ô∏è Modera√ß√£o: {moderation_time}s | Total: {total_time}s | üõë Mensagem bloqueada por modera√ß√£o")
                
                categorias = [k for k, v in moderation_result.categories.items() if v]
                
                blocked_message = ChatMessageContent(
                    role=AuthorRole.ASSISTANT,
                    content=f"‚ö†Ô∏è Conte√∫do sens√≠vel detectado ({', '.join(categorias)}). A mensagem foi bloqueada.",
                    name="Sistema"
                )
                self.memory_manager.add_message(blocked_message)
                print(f"ü§ñ Sistema: {blocked_message.content}")
                
                return blocked_message.content
            
            user_message = ChatMessageContent(
                role=AuthorRole.USER,
                content=mensagem
            )
            
            self.memory_manager.add_message(user_message)
            
            # Tempo de cria√ß√£o de contexto
            context_start = time.time()
            context_summary = self._create_context_summary()
            enhanced_message = f"{context_summary}\n\nUsu√°rio atual: {mensagem}"
            context_time = round(time.time() - context_start, 3)
            
            print(f"üìã Processando com contexto resumido ({len(self.memory_manager.get_history())} mensagens no hist√≥rico)")
            print(f"üîç Contexto enviado: {len(context_summary)} caracteres")
            
            # Detectar palavras-chave para for√ßar handoff direto (evitar TriageAgent responder)
            tech_keywords = ['senha', 'email', 'e-mail', 'login', 'acesso', 'cadastrado', 'redefinir']
            hr_keywords = ['benef√≠cio', 'f√©rias', 'licen√ßa', 'rh', 'recursos humanos']
            flight_keywords = ['voo', 'assento', 'reserva', 'cancelar', 'status']
            
            mensagem_lower = mensagem.lower()
            
            # For√ßar handoff direto baseado em palavras-chave
            if any(keyword in mensagem_lower for keyword in tech_keywords):
                logger.info("üéØ Detectado problema t√©cnico - for√ßando handoff direto para TechSupportAgent")
                fallback_result = await self._force_handoff_to_agent("TechSupportAgent", mensagem)
                if fallback_result:
                    total_time = round(time.time() - start_time, 3)
                    logger.info(f"‚è±Ô∏è DIRETO TECH - Total: {total_time}s")
                    return fallback_result
                    
            elif any(keyword in mensagem_lower for keyword in hr_keywords):
                logger.info("üéØ Detectado consulta RH - for√ßando handoff direto para HRAgent")
                fallback_result = await self._force_handoff_to_agent("HRAgent", mensagem)
                if fallback_result:
                    total_time = round(time.time() - start_time, 3)
                    logger.info(f"‚è±Ô∏è DIRETO HR - Total: {total_time}s")
                    return fallback_result
                    
            elif any(keyword in mensagem_lower for keyword in flight_keywords):
                # Determinar se √© SeatBooking ou FlightStatus
                if any(word in mensagem_lower for word in ['assento', 'trocar', 'alterar']):
                    logger.info("üéØ Detectado troca de assento - for√ßando handoff direto para SeatBookingAgent")
                    fallback_result = await self._force_handoff_to_agent("SeatBookingAgent", mensagem)
                else:
                    logger.info("üéØ Detectado consulta voo - for√ßando handoff direto para FlightStatusAgent")
                    fallback_result = await self._force_handoff_to_agent("FlightStatusAgent", mensagem)
                    
                if fallback_result:
                    total_time = round(time.time() - start_time, 3)
                    logger.info(f"‚è±Ô∏è DIRETO FLIGHT - Total: {total_time}s")
                    return fallback_result
            
            # Verificar se deve manter continuidade com agente atual
            stick_with_agent = self._should_stick_with_current_agent()
            if stick_with_agent:
                logger.info(f"üîó For√ßando continuidade com {stick_with_agent}")
                # Usar apenas a mensagem atual, n√£o o enhanced_message
                # O agente receber√° seu contexto espec√≠fico das √∫ltimas mensagens
                fallback_result = await self._force_handoff_to_agent(stick_with_agent, mensagem)
                if fallback_result:
                    total_time = round(time.time() - start_time, 3)
                    logger.info(f"‚è±Ô∏è CONTINUIDADE - Total: {total_time}s | Agent: {stick_with_agent}")
                    return fallback_result
            
            # Tempo de processamento do agente
            agent_start = time.time()
            
            # Tentar passar contexto completo para a orquestra√ß√£o
            try:
                chat_history = self.memory_manager.get_chat_history()
                orchestration_result = await asyncio.wait_for(
                    self.handoff_orchestration.invoke(
                        task=enhanced_message,
                        runtime=self.runtime,
                        history=chat_history  # Tentar passar hist√≥rico completo
                    ),
                    timeout=25.0
                )
            except TypeError:
                # Se history n√£o for suportado, usar apenas a mensagem enhanced
                orchestration_result = await asyncio.wait_for(
                    self.handoff_orchestration.invoke(
                        task=enhanced_message,
                        runtime=self.runtime
                    ),
                    timeout=25.0
                )
            agent_time = round(time.time() - agent_start, 3)
            
            result = await orchestration_result.get()
            
            # Calcular tempo total
            total_time = round(time.time() - start_time, 3)
            
            # Log detalhado de performance
            agent_used = getattr(self, '_last_agent_response', {}).get('name', 'Unknown')
            logger.info(f"‚è±Ô∏è PERFORMANCE - Total: {total_time}s | Guardrails: {guardrail_time}s | Modera√ß√£o: {moderation_time}s | Contexto: {context_time}s | Agente: {agent_time}s | Agent: {agent_used}")
            
            # Verificar se houve resposta de agente especialista
            if hasattr(self, '_last_agent_response') and self._last_agent_response:
                response_agent = self._last_agent_response['name']
                response_content = self._last_agent_response['content']
                
                if response_agent != "TriageAgent":
                    # Verificar se √© resposta OOS de agente especialista e interceptar
                    if self._is_out_of_scope_response(response_content):
                        logger.warning(f"üö´ Interceptando resposta OOS de {response_agent}")
                        # TriageAgent deve gerar resposta pr√≥pria para OOS
                        oos_response = "Desculpe, n√£o consegui encontrar informa√ß√µes sobre isso. Posso ajud√°-lo com quest√µes relacionadas a voos, suporte t√©cnico, recursos humanos ou outras √°reas dispon√≠veis."
                        
                        # Adicionar ao hist√≥rico como resposta do TriageAgent
                        triage_message = ChatMessageContent(
                            role=AuthorRole.ASSISTANT,
                            content=oos_response,
                            name="TriageAgent"
                        )
                        self.memory_manager.add_message(triage_message)
                        
                        return oos_response
                    
                    # Resposta v√°lida de agente especialista
                    return response_content
                else:
                    # TriageAgent respondeu - verificar se √© apropriado
                    logger.info(f"üéØ TriageAgent respondeu: {response_content[:100]}...")
                    
                    # Detectar se o TriageAgent est√° tentando responder algo que deveria ser handoff
                    handoff_indicators = [
                        'vou encaminhar',
                        'direcionando',
                        'transferindo',
                        'redirecionando',
                        'aguarde um instante',
                        'setor respons√°vel',
                        'suporte t√©cnico',
                        'especialista',
                        'departamento'
                    ]
                    
                    # Se cont√©m indicadores de handoff OU palavras t√©cnicas de handoff
                    if (any(keyword in response_content.lower() for keyword in ['transfer', 'handoff', 'delegate', 'routing']) or
                        any(indicator in response_content.lower() for indicator in handoff_indicators)):
                        logger.warning(f"üö´ TriageAgent tentou responder em vez de fazer handoff (ignorado): {response_content[:50]}...")
                        
                        # For√ßar handoff para TechSupportAgent se menciona problemas t√©cnicos
                        if any(tech_word in response_content.lower() for tech_word in ['senha', 'email', 'acesso', 'login', 'suporte t√©cnico']):
                            logger.info("üîÑ For√ßando handoff para TechSupportAgent...")
                            fallback_result = await self._force_handoff_to_agent("TechSupportAgent", mensagem)
                            if fallback_result:
                                return fallback_result
                        
                        return "Desculpe, houve um problema no roteamento. Tente reformular sua pergunta."
                    
                    # Resposta v√°lida do TriageAgent (apenas OOS verdadeiro)
                    return response_content
            
            # Se chegou at√© aqui, sem resposta capturada - usar result
            result_str = str(result) if result else ""
            
            # Se result cont√©m palavras de handoff, √© falha na orquestra√ß√£o
            if result_str and any(keyword in result_str.lower() for keyword in ['transfer', 'handoff', 'delegate']):
                logger.warning(f"üö´ TriageAgent tentou responder (ignorado): {result_str[:50]}...")
                return "Desculpe, n√£o consegui encontrar informa√ß√µes sobre isso. Posso ajud√°-lo com quest√µes relacionadas a voos, suporte t√©cnico, recursos humanos ou outras √°reas dispon√≠veis."
            
            # Resultado v√°lido ou vazio
            result_final = result_str if result_str else "Conversa finalizada."
            
            # Salvar hist√≥rico antes de retornar
            try:
                self.memory_manager.save_history()
                logger.info(f"üíæ Hist√≥rico salvo com sucesso ({self.memory_manager.message_count()} mensagens)")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro ao salvar hist√≥rico final: {e}")
            
            return result_final
            
        except asyncio.TimeoutError:
            total_time = round(time.time() - start_time, 3)
            error_msg = f"‚è∞ Timeout ap√≥s {total_time}s: O processamento demorou muito. Tente novamente."   
            logger.error(error_msg)
            return error_msg
            
        except Exception as e:
            total_time = round(time.time() - start_time, 3)
            return self._handle_processing_error(e, total_time)
    
    def _handle_processing_error(self, error: Exception, total_time: float) -> str:
        """Trata erros de processamento de mensagem"""
        error_str = str(error)
        
        # Log completo do erro para debugging
        logger.error(f"‚ùå Erro completo ap√≥s {total_time}s: {error_str}")
        
        # Tratamento espec√≠fico para erros conhecidos
        if "api_key" in error_str.lower():
            error_msg = f"üîë Erro de API Key ap√≥s {total_time}s: Verifique se a OPENAI_API_KEY est√° configurada corretamente"
        elif "gpt-4.1" in error_str or "model" in error_str.lower():
            error_msg = f"ü§ñ Erro de modelo ap√≥s {total_time}s: Modelo n√£o encontrado. Usando fallback."
        elif "quota" in error_str.lower() or "rate" in error_str.lower():
            error_msg = f"üìä Limite de API ap√≥s {total_time}s: Cota excedida ou rate limit atingido"
        else:
            error_msg = f"‚ùå Erro ap√≥s {total_time}s ao processar mensagem: {error_str[:200]}..."
        
        logger.error(error_msg)
        
        if "model_error" in error_str or "invalid content" in error_str:
            logger.info("üîÑ Erro de modelo detectado. Sistema otimizar√° contexto automaticamente.")
            return "üîÑ Sistema detectou sobrecarga. Tente reformular sua pergunta de forma mais simples."
        
        return error_msg
    
    def _create_context_summary(self) -> str:
        recent_messages = self.memory_manager.get_recent_messages(count=15)  # Aumentado de 6 para 15 mensagens
        
        if len(recent_messages) <= 1:
            return "[CONTEXTO: Primeira intera√ß√£o]"
        
        # Extrair informa√ß√µes importantes j√° mencionadas na conversa
        important_info = self._extract_important_context(recent_messages)
        
        context_parts = []
        for msg in recent_messages[-12:]:  # Aumentado de 5 para 12 mensagens
            role = "Usu√°rio" if msg.role.value == "user" else f"Assistente({msg.name or 'Sistema'})"
            # Aumentado limite de caracteres de 100 para 300 para preservar mais contexto
            content = str(msg.content)[:300] + "..." if len(str(msg.content)) > 300 else str(msg.content)
            context_parts.append(f"- {role}: {content}")
        
        context = "\n".join(context_parts)
        
        # Adicionar informa√ß√µes importantes extra√≠das
        final_context = f"[CONTEXTO DA CONVERSA:\n{context}\n"
        if important_info:
            final_context += f"\nINFORMA√á√ïES IMPORTANTES J√Å FORNECIDAS:\n{important_info}\n"
        final_context += "]"
        
        return final_context
    
    def _extract_important_context(self, messages) -> str:
        """Extrai informa√ß√µes importantes que j√° foram mencionadas na conversa"""
        important_data = []
        
        for msg in messages:
            content_upper = str(msg.content).upper()
            content_lower = str(msg.content).lower()
            
            # Detectar n√∫meros de voo
            import re
            flight_numbers = re.findall(r'\b[A-Z]{2}\d{3,4}\b', content_upper)
            important_data.extend(f"Voo: {flight}" for flight in flight_numbers if f"Voo: {flight}" not in important_data)
            
            # Detectar assentos
            seats = re.findall(r'\b\d{1,2}[A-F]\b', content_upper)
            important_data.extend(f"Assento: {seat}" for seat in seats if f"Assento: {seat}" not in important_data)
            
            # Detectar tipos de solicita√ß√£o
            if any(word in content_lower for word in ['cancelar', 'cancelamento']) and "Solicita√ß√£o: Cancelamento" not in important_data:
                important_data.append("Solicita√ß√£o: Cancelamento")
            
            if any(word in content_lower for word in ['trocar', 'mudar', 'alterar']) and 'assento' in content_lower and "Solicita√ß√£o: Troca de assento" not in important_data:
                important_data.append("Solicita√ß√£o: Troca de assento")
        
        return "\n".join(f"- {info}" for info in important_data)
    
    def obter_historico(self) -> list[ChatMessageContent]:
        """Retorna o hist√≥rico completo da conversa"""
        return self.memory_manager.get_history()
    
    def limpar_historico(self):
        """Limpa o hist√≥rico da conversa"""
        self.memory_manager.clear_history()
    
    async def _force_handoff_to_agent(self, agent_name: str, message: str) -> str:
        """For√ßa handoff para um agente espec√≠fico usando contexto das √∫ltimas mensagens dele"""
        try:
            if agent_name in self.specialist_agents:
                agent = self.specialist_agents[agent_name]
                
                # Obter √∫ltimas 5 mensagens deste agente espec√≠fico usando memory manager
                recent_agent_messages = self.memory_manager.get_recent_messages_by_agent(agent_name, count=5)
                
                # Montar contexto simples: √∫ltimas mensagens do agente + mensagem atual
                context_parts = []
                
                if recent_agent_messages:
                    context_parts.append(f"[SUAS √öLTIMAS {len(recent_agent_messages)} MENSAGENS:]")
                    for msg in recent_agent_messages:
                        context_parts.append(f"Voc√™ disse: {msg.content}")
                    context_parts.append("")
                
                context_parts.append("[MENSAGEM ATUAL DO USU√ÅRIO:]")
                context_parts.append(message)
                
                full_context = "\n".join(context_parts)
                
                # Processar com contexto espec√≠fico do agente
                logger.info(f"üéØ Handoff para {agent_name} com {len(recent_agent_messages)} mensagens de contexto")
                response = await agent.invoke(full_context)
                
                # Adicionar resposta ao hist√≥rico
                response_message = ChatMessageContent(
                    role=AuthorRole.ASSISTANT,
                    content=str(response),
                    name=agent_name
                )
                self.memory_manager.add_message(response_message)
                
                # Salvar hist√≥rico no arquivo JSON
                self.memory_manager.save_history()
                logger.info(f"üíæ Hist√≥rico salvo em {self.memory_manager.persist_file}")
                
                return str(response)
        except Exception as e:
            logger.error(f"Erro no handoff for√ßado para {agent_name}: {e}")
        return ""
    
    def _is_out_of_scope_response(self, content: str) -> bool:
        """Detecta se uma resposta √© fora de escopo (OOS)"""
        content_lower = content.lower()
        
        # Padr√µes que indicam resposta OOS de agentes especialistas
        oos_patterns = [
            "desculpe, n√£o posso ajudar com essa pergunta",
            "n√£o posso ajudar com isso",
            "n√£o √© da minha √°rea",
            "fora do meu escopo",
            "n√£o √© do meu tema",
            "n√£o posso responder sobre",
            "n√£o tenho informa√ß√µes sobre",
            "estou dispon√≠vel para responder d√∫vidas sobre",
            "se precisar de informa√ß√µes sobre esses temas"
        ]
        
        return any(pattern in content_lower for pattern in oos_patterns)
    
    def _identify_active_agent(self) -> str:
        """Identifica qual agente est√° ativo com base nas mensagens recentes"""
        recent_messages = self.memory_manager.get_recent_messages(count=3)
        
        # Procurar pelo √∫ltimo agente especialista que respondeu
        for msg in reversed(recent_messages):
            if (hasattr(msg, 'role') and 
                msg.role.value == "assistant" and 
                msg.name and 
                msg.name != "TriageAgent" and
                msg.name != "Sistema"):
                return msg.name
        
        return ""
    
    def _should_stick_with_current_agent(self) -> str:
        """Determina se deve continuar com o agente atual baseado no contexto"""
        # Identificar agente ativo
        active_agent = self._identify_active_agent()
        
        if not active_agent:
            return ""
        
        # Usar get_recent_messages_by_agent para obter contexto espec√≠fico
        recent_agent_messages = self.memory_manager.get_recent_messages_by_agent(active_agent, count=2)
        
        # Verificar se o √∫ltimo agente fez uma pergunta que precisa de resposta
        for msg in recent_agent_messages:
            content = str(msg.content).lower()
            # Se o agente fez uma pergunta espec√≠fica, manter com ele
            if any(question in content for question in [
                "qual √© o n√∫mero do seu voo",
                "qual assento", 
                "qual √© o seu e-mail",
                "confirme",
                "por favor",
                "informe",
                "preciso",
                "pode me informar",
                "?"  # Qualquer pergunta
            ]):
                logger.info(f"üîó Mantendo continuidade com {active_agent} (fez pergunta)")
                return active_agent
        
        return ""
