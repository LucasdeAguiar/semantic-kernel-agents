#!/usr/bin/env python3
"""
Script para testar a continuidade de mem√≥ria/contexto entre mensagens.
Analisa se os agentes especialistas mant√™m contexto de conversas anteriores.
"""

import asyncio
import os
import sys
import json
from datetime import datetime

# Adiciona o diret√≥rio raiz ao path
root_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, root_dir)

from api.services import AgentService
from api.config import OPENAI_API_KEY

class MemoryContinuityTester:
    def __init__(self):
        self.api_key = OPENAI_API_KEY
        if not self.api_key:
            raise ValueError("OPENAI_API_KEY n√£o encontrada nas configura√ß√µes")
        
        self.agent_service = AgentService(self.api_key)
    
    async def run_memory_test(self):
        """Executa teste de continuidade de mem√≥ria baseado no caso reportado"""
        
        print("üß† TESTE DE CONTINUIDADE DE MEM√ìRIA")
        print("=" * 50)
        
        # Teste baseado na conversa reportada pelo usu√°rio
        test_messages = [
            "Quero trocar meu assento.",
            "JJ1234",  # N√∫mero do voo
            "12A",     # Primeiro assento
            "12A",     # Repetindo o assento (simula dupla entrada)
            "Voo JJ1234",  # Reiterar o voo
            "12A"      # Assento final
        ]
        
        print("üìù Simulando a conversa problem√°tica:")
        print("User: Quero trocar meu assento.")
        print("Expected: SeatBookingAgent pergunta o n√∫mero do voo")
        print()
        
        results = []
        
        for i, message in enumerate(test_messages, 1):
            print(f"üó£Ô∏è  MENSAGEM {i}: {message}")
            
            # Processar mensagem
            result = await self.agent_service.process_message(message)
            
            # Capturar resposta
            agent_name = result.get('agent_name', 'Unknown')
            response = result.get('response', 'No response')
            
            print(f"ü§ñ {agent_name}: {response}")
            print()
            
            # Analisar se h√° problema de continuidade
            memory_issue = self._analyze_memory_issue(i, message, response, agent_name)
            if memory_issue:
                print(f"‚ö†Ô∏è  PROBLEMA DE MEM√ìRIA: {memory_issue}")
                print()
            
            results.append({
                'step': i,
                'user_message': message,
                'agent_name': agent_name,
                'agent_response': response,
                'memory_issue': memory_issue
            })
            
            # Pequena pausa entre mensagens
            await asyncio.sleep(1)
        
        # An√°lise final
        print("üìä AN√ÅLISE FINAL:")
        print("-" * 30)
        self._final_analysis(results)
        
        # Verificar hist√≥rico completo
        print("\nüìã HIST√ìRICO COMPLETO:")
        print("-" * 30)
        history = self.agent_service.get_chat_history()
        if history.get('success'):
            for i, msg in enumerate(history['messages'], 1):
                role = msg['role']
                name = msg.get('name', 'N/A')
                content = msg['content'][:100] + "..." if len(msg['content']) > 100 else msg['content']
                print(f"{i:2d}. [{role}] {name}: {content}")
        
        return results
    
    def _analyze_memory_issue(self, step, user_message, agent_response, agent_name):
        """Analisa se h√° problemas de continuidade de mem√≥ria"""
        
        # Detectar problemas espec√≠ficos baseados na conversa reportada
        if step == 4 and "n√∫mero do seu voo" in agent_response.lower():
            return "Agente esqueceu que o voo JJ1234 j√° foi informado no passo 2"
        
        if step == 5 and "qual √© o assento" in agent_response.lower():
            return "Agente esqueceu que o assento 12A j√° foi mencionado nos passos 3 e 4"
        
        if step == 6 and "qual √© o assento" in agent_response.lower():
            return "Agente continua perguntando o assento mesmo ap√≥s m√∫ltiplas men√ß√µes"
        
        # Verificar se agente est√° perguntando informa√ß√µes j√° fornecidas
        if "n√∫mero do voo" in agent_response.lower() and step > 2:
            return f"Agente pergunta n√∫mero do voo novamente no passo {step}"
        
        if "qual.*assento" in agent_response.lower() and step > 3:
            return f"Agente pergunta assento novamente no passo {step}"
        
        return None
    
    def _final_analysis(self, results):
        """An√°lise final dos resultados"""
        
        memory_issues = [r for r in results if r['memory_issue']]
        
        if not memory_issues:
            print("‚úÖ Nenhum problema de continuidade detectado!")
            return
        
        print(f"‚ùå {len(memory_issues)} problemas de continuidade encontrados:")
        for issue in memory_issues:
            print(f"   - Passo {issue['step']}: {issue['memory_issue']}")
        
        print("\nüîç POSS√çVEIS CAUSAS:")
        print("1. Agentes especialistas n√£o recebem hist√≥rico completo")
        print("2. Contexto sendo resumido demais na fun√ß√£o _create_context_summary()")
        print("3. Agentes n√£o processando adequadamente o contexto fornecido")
        print("4. Problema na implementa√ß√£o do ChatHistory no Semantic Kernel")
        
        print("\nüí° RECOMENDA√á√ïES:")
        print("1. Modificar _create_context_summary() para incluir mais contexto")
        print("2. Passar hist√≥rico completo para agentes especialistas")
        print("3. Adicionar instru√ß√µes espec√≠ficas sobre manuten√ß√£o de contexto")
        print("4. Implementar valida√ß√£o de contexto antes das respostas")

async def main():
    """Fun√ß√£o principal"""
    try:
        tester = MemoryContinuityTester()
        await tester.run_memory_test()
        
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
