#!/usr/bin/env python3
"""
Script para testar a conex√£o com a API da OpenAI
"""

import os
import sys
import asyncio
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# Adiciona o diret√≥rio raiz ao path
root_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, root_dir)

async def test_openai_connection():
    """Testa a conex√£o com a API da OpenAI"""
    
    print("üîç TESTE DE CONEX√ÉO COM OPENAI API")
    print("=" * 40)
    
    # Verificar API key
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå OPENAI_API_KEY n√£o encontrada no arquivo .env")
        return False
    
    print(f"‚úÖ API Key encontrada: {api_key[:10]}...{api_key[-4:]}")
    
    try:
        from semantic_kernel.connectors.ai.open_ai import OpenAIChatCompletion
        
        # Testar modelos diferentes
        models_to_test = ["gpt-4o", "gpt-4", "gpt-3.5-turbo"]
        
        for model in models_to_test:
            print(f"\nüß™ Testando modelo: {model}")
            
            try:
                service = OpenAIChatCompletion(
                    service_id=f"test-{model}",
                    ai_model_id=model,
                    api_key=api_key
                )
                
                print(f"‚úÖ Servi√ßo {model} criado com sucesso")
                
                # Teste simples de gera√ß√£o
                try:
                    # N√£o fazer chamada real para economizar tokens, apenas verificar inicializa√ß√£o
                    print(f"‚úÖ {model} dispon√≠vel para uso")
                    return True
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro ao testar {model}: {e}")
                    continue
                    
            except Exception as e:
                print(f"‚ùå Erro ao criar servi√ßo {model}: {e}")
                continue
        
        print("\n‚ùå Nenhum modelo funcionou")
        return False
        
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        return False

async def main():
    """Fun√ß√£o principal"""
    try:
        success = await test_openai_connection()
        
        if success:
            print("\n‚úÖ Teste conclu√≠do com sucesso!")
            print("üí° A API da OpenAI deve estar funcionando corretamente.")
        else:
            print("\n‚ùå Teste falhou!")
            print("üí° Verifique:")
            print("   1. Se a OPENAI_API_KEY est√° correta")
            print("   2. Se voc√™ tem cr√©ditos na conta OpenAI")
            print("   3. Se n√£o h√° bloqueios de firewall")
            
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")

if __name__ == "__main__":
    asyncio.run(main())
